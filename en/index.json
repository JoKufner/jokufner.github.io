[{"content":" Note: This is human-written content. The logic described here has been tested and does not come from any “AI fantasy.” I hope you find insight and value for yourself or your organization. Enjoy reading.\nSummary: Second part of the series on the ticket system with Microsoft 365 and Power Automate. You can find the first part here: Simple Ticket System with Microsoft Forms, Planner \u0026amp; Power Automate – Step-by-Step to a Quick Ticket Solution in Microsoft 365\nStarting Point and Target Picture In the first part of this series, a small ticket system was built using Microsoft Forms and Microsoft Planner. The logic was implemented in Power Automate. To ensure communication with requesters, the submitted email address was stored in the first checklist item of the Planner task.\nIn this second part, we add a small SharePoint list. Its purpose is to store the requester’s email and a reference status. This enables two new features:\nThe checklist can be used to its full extent. Status changes can be detected. Requesters can thus be informed about changes to the ticket status, e.g., “the ticket is now in progress.” The SharePoint List To create a SharePoint list, navigate to a suitable SharePoint site (e.g., office.com) → Apps → SharePoint → one of your SP sites. Under “Site Contents,” you can create a new list.\nFor this example, I created a list called “Planner-Ticketsystem-Referenz” with the following columns:\nTitle (default title, created automatically with the list) Email (Text) Status Reference (Text) Columns of the SharePoint list.\nAdjusting Power Automate Flow \u0026ldquo;YT_Ticketsystem_neues_Ticket\u0026rdquo; In the previous part, the flow “YT_Ticketsystem_neues_Ticket” was created. It will now be extended to write the requester’s email and the last known status into the reference list.\nThe following steps are required:\nDelete the action “Update task detail” and Add a “Create Item” action to insert the reference entry into the SharePoint list. Action: Create item To add the new action, search for the connector “SharePoint” and select the action “Create item.”\nConfigure the action as follows:\nSite Address: Address of your SharePoint site (dropdown) List Name: The newly created list Title: The ID of the newly created Planner task (from the “Create a Task” action) Email: The email of the submitting user (Responder’s Email from the trigger) The completed action should look like this:\nThe new \u0026lsquo;Create item\u0026rsquo; action\nSchematic overview:\nCreating a new ticket\nThe Forms form is submitted and triggers the Power Automate flow. The flow creates both the Planner task and the SharePoint list item. The list item contains a reference to the Planner task. An initial entry in the SharePoint list:\nAn initial entry in the SharePoint list. The status reference \u0026lsquo;unknown\u0026rsquo; is intentional to detect deviations from the actual status.\nAdjusting Flow \u0026ldquo;YT Ticketsystem_Abschluss\u0026rdquo; To communicate with requesters upon ticket completion in Planner, the flow “YT Ticketsystem_Abschluss” must be modified:\nAdd a “Get items” action. Reference the requester’s email (for the Teams message) from the first item returned by “Get items.” Action: Get items “Get items” retrieves the SharePoint list entries from the newly created list. To return only the relevant item, an OData query filter must be added:\nOData filter:\nTitle eq \u0026#39;@{outputs(\u0026#39;Get_task_details\u0026#39;)?[\u0026#39;body/id\u0026#39;]}\u0026#39; The new \u0026lsquo;Get items\u0026rsquo; action\nAction: \u0026ldquo;Get user profile (V2)\u0026rdquo; The above-mentioned action retrieves the requesting user from Azure AD. The retrieved information (display name and email) is then used to send a message to the requesting user.\nTo reference the email from the SharePoint list, enter the following expression in the action (field User (UPN)):\nbody(\u0026#39;Get_items\u0026#39;)?[\u0026#39;value\u0026#39;][0][\u0026#39;E_x002d_Mail\u0026#39;] This expression references the first element [0] from the array “value” in the body of the “Get items” action.\nExpression input example:\nExpression for retrieving the user’s email\nSummary The second part of the series on creating a simple ticket system with Microsoft 365 and Power Automate introduced SharePoint as an additional component. It supports the following features:\nThe checklist in the Planner task can now be fully used again. The foundation for monitoring status changes (e.g., from “new ticket” to “ticket in progress”) is now established. Outlook In the third part of this series, the mentioned status monitoring will be implemented. This will allow users to be informed about actions related to their ticket (e.g., “ticket is now in progress,” “there are questions about your ticket,” etc.).\n","permalink":"https://jonaskufner.com/en/posts/ticketsystem-microsoft-365-sharepoint-referenzliste-statusbenachrichtigungen/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e This is human-written content. The logic described here has been tested and does not come from any “AI fantasy.” I hope you find insight and value for yourself or your organization. Enjoy reading.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e Second part of the series on the ticket system with Microsoft 365 and Power Automate. You can find the first part here: \u003ca href=\"https://jonaskufner.com/en/posts/ticketsystem-microsoft-forms-planner-power-automate/\"\u003eSimple Ticket System with Microsoft Forms, Planner \u0026amp; Power Automate – Step-by-Step to a Quick Ticket Solution in Microsoft 365\u003c/a\u003e\u003c/p\u003e","title":"Ticket System with Microsoft 365 – Part 2: SharePoint Reference List \u0026 Status Notifications"},{"content":"Here are some ways to get in touch:\nContact Form You can find my contact form here.\nLinkedIn Feel free to connect with me on LinkedIn — I look forward to hearing from you: https://www.linkedin.com/in/jonas-kufner-972b7064/\nYouTube I use my YouTube channel to present tutorials of working Power Platform solutions.\nIf you find the content helpful, I’d really appreciate a subscription, comment, or like.\nHere’s the channel: https://www.youtube.com/@JonasKufner\n","permalink":"https://jonaskufner.com/en/contact/","summary":"\u003cp\u003eHere are some ways to get in touch:\u003c/p\u003e\n\u003ch2 id=\"contact-form\"\u003eContact Form\u003c/h2\u003e\n\u003cp\u003eYou can find my contact form \u003ca href='https://forms.office.com/Pages/ResponsePage.aspx?id=tjXwfqXbKEimWrzVJg3sG_wnWSd2U1pJrsi4NiwnEHlUMjNPRlhZQzdUVURQWFNLUExYMTYwUzY5Ny4u\u0026embed=true' target='_blank'\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"linkedin\"\u003eLinkedIn\u003c/h2\u003e\n\u003cp\u003eFeel free to connect with me on LinkedIn — I look forward to hearing from you: \u003ca href=\"https://www.linkedin.com/in/jonas-kufner-972b7064/\"\u003ehttps://www.linkedin.com/in/jonas-kufner-972b7064/\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"youtube\"\u003eYouTube\u003c/h2\u003e\n\u003cp\u003eI use my YouTube channel to present tutorials of working Power Platform solutions.\u003cbr\u003e\nIf you find the content helpful, I’d really appreciate a subscription, comment, or like.\u003cbr\u003e\nHere’s the channel: \u003ca href=\"https://www.youtube.com/@JonasKufner\"\u003ehttps://www.youtube.com/@JonasKufner\u003c/a\u003e\u003c/p\u003e","title":"Contact"},{"content":" Summary: This tutorial shows how to quickly build a simple ticket system using Microsoft Forms, Planner, and Power Automate – including Teams notifications when a ticket is created and a completion message when it’s closed.\nGo to Part 2\nTarget Picture \u0026amp; Prerequisites Goal: A simple ticket system that automatically converts submissions from Forms into Planner tasks, sorts them into buckets, and notifies the requester in Teams. Upon completion, a feedback message is automatically sent.\nPrerequisites\nMicrosoft 365 tenant with access to Forms, Planner (Tasks in Teams), Power Automate, and Teams Basic permissions to create flows and Planner plans Optional: a dedicated sandbox group for the Planner plan Architecture at a Glance For the entire ticket system, you only need 4 simple components:\nThe components of the ticket system.\nForms: Ticket submission (title, description, category e.g. hardware/software, name/email) Planner: Plan with buckets (e.g. “Hardware”, “Software”) – tickets are created here as tasks Power Automate #1 (When a new response is submitted – Forms):\nGet response → create Planner task → set details/description → write sender’s email to the checklist → sort into bucket by category → send Teams notification to the person Power Automate #2 (When a task is completed – Planner):\nReact to completion → read checklist from task (email) → get profile → send completion notification to the person in Teams Step 1: Microsoft Forms – Create the Ticket Form The first component – the Forms form – is provided to requesters so they can create new tickets.\nOpen Forms (e.g. via forms.office.com/) Create a new form, e.g. “Ticket System – YouTube” Add questions Ticket title (short answer, required) Description (long answer, required) Category (choice, e.g. Hardware, Software, required) Settings Record name/email (depending on tenant/privacy policy) → important for feedback. Test: Fill out and submit in preview mode. The finished form\nStep 2: Microsoft Planner – Create Plan \u0026amp; Buckets Planner (or the plan in Planner) is used to manage and process the created tickets.\nOpen Planner (Tasks in Teams or office.com → Planner). Create a new plan, e.g. “YouTube Ticket System”, in an appropriate Microsoft 365 group (e.g. Sandbox). Set up buckets: Hardware, Software Optional: Prepare priorities, labels/color categories. The finished task plan\nNote: Buckets are key for automatic categorization.\nStep 3: Power Automate Flow #1 – Create \u0026amp; Notify Ticket The first flow is used to react to newly created tickets (via the Forms form). The flow creates Planner tasks and informs the requester about the successful creation.\nGoal: Automatically create a Planner task for each form submission, set description/metadata, store the requester’s email, assign a bucket, and send a Teams message.\n3.1 Create Flow Automated cloud flow Trigger: When a new response is submitted (Microsoft Forms) Parameter: Form ID → your ticket form 3.2 Retrieve Response Details Action: Get response details (Microsoft Forms) Form Id: your form Response Id: Dynamic content → Response Id from trigger 3.3 Create Planner Task Action: Create a task (Planner) Group: your group (e.g. Sandbox) Plan: “YouTube Ticket System” Title: Form field “Ticket title” (Optional) Due date/priority 3.4 Update Task Details Action: Update task details (Planner) Task Id: ID from “Create a task” Description: Form field “Description” 3.5 Store Requester’s Email in Checklist Action: Update checklist item (Planner task) Task Id: from “Create a task” Checklist item Id: 0 Title: Responder’s Email from Forms (dynamic content) Is checked: false Why a checklist? It’s a lightweight way to store the email on the ticket and retrieve it later in the completion flow.\n3.6 Automatically Assign Buckets (Switch) Initialize variable Name: BucketId (String) Switch (on: Form field “Category”) Case “Hardware” → Set variable BucketId to Bucket ID “Hardware” Default (Software) → Set variable BucketId to Bucket ID “Software” Find bucket IDs (one-time): Temporarily add List buckets (Planner) → select group + plan → inspect output → copy IDs → remove helper action again.\nUpdate task (Planner) Task Id: from “Create a task” Bucket Id: variables('BucketId') 3.7 Teams Notification to Requester (personalized) Get user profile (Office 365 Users) User (UPN): Forms Responder’s Email Post message in a chat or channel (Teams) – Chat with Flow bot Recipient: Forms Responder’s Email Message (example): Hello @{outputs(\u0026#39;Get_user_profile\u0026#39;)?[\u0026#39;body/givenName\u0026#39;]}, your ticket \u0026#34;**@{outputs(\u0026#39;Get_response_details\u0026#39;)?[\u0026#39;body/\u0026lt;FormFieldTitle\u0026gt;\u0026#39;]}**\u0026#34; has been created. We’ll notify you once it’s completed. Replace \u0026lt;FormFieldTitle\u0026gt; with the internal name of your form field (often “Title”/“Ticket_Title”). The first flow processing the form information.\nStep 4: Power Automate Flow #2 – Automatically Notify Completion The second flow reacts when a task is completed and informs the requester that their ticket is done.\nGoal: As soon as a Planner task is Completed, the person from the form is notified in Teams.\n4.1 Create Flow Automated cloud flow Trigger: When a task is completed (Planner) Group: Sandbox Plan: YouTube Ticket System 4.2 Get Task Details (incl. Checklist) Action: Get task details (Planner) Task Id: Task Id from trigger 4.3 Extract Email from Checklist Depending on your environment, checklist can be an array or object. In many cases, the following (from the video) works:\nbody(\u0026#39;Get_task_details\u0026#39;)?[\u0026#39;checklist\u0026#39;][0]?[\u0026#39;value\u0026#39;]?[\u0026#39;title\u0026#39;] Alternatively, you can reference the first array element using first():\nfirst(body(\u0026#39;Get_task_details\u0026#39;)?[\u0026#39;checklist\u0026#39;])?[\u0026#39;value\u0026#39;][\u0026#39;title\u0026#39;] 4.4 Load Display Name Get user profile (Office 365 Users)\nUser (UPN): Email from 4.3 4.5 Send Teams Message Post message in a chat or channel (Teams) – Chat with Flow bot\nRecipient: Email from 4.3\nMessage (example):\nThe second flow informing requesters after completion.\nExtensions \u0026amp; Best Practices File attachments in the form: Enable file upload (consider storage/compliance); store the link in the task description or comment.\nAssignment by category: After task creation, use “Assign task” to automatically assign fixed owners per bucket.\nPriorities \u0026amp; due dates: Transfer from form fields.\nData storage: Instead of the checklist, persist email e.g. in description or Dataverse (for scalability).\nAlternative email notification: Use “Send an email (V2)” from Outlook – same email variable.\nMultilingual setups: Clearly name flows and fields (DE/EN) for mixed tenants.\nSecurity/privacy: Collect only necessary personal data; define deletion/retention periods.\nYouTube (German Version): Create a Ticket System with Microsoft 365 | Forms, Planner \u0026amp; Power Automate Step-by-StepVideo tutorial for this blog post (YouTube | external link)\nConclusion \u0026amp; Contact With Forms + Planner + Power Automate, you can quickly build an intentionally simple ticket system – ideal for small IT teams, clubs, or departments. It’s easily expandable (assignment, prioritization, Dataverse, approvals).\n👉 Questions or need help setting it up? Use my Contact – I can help with design, best practices, and scaling to the Power Platform.\n","permalink":"https://jonaskufner.com/en/posts/ticketsystem-microsoft-forms-planner-power-automate/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e This tutorial shows how to quickly build a \u003cstrong\u003esimple ticket system\u003c/strong\u003e using \u003cstrong\u003eMicrosoft Forms\u003c/strong\u003e, \u003cstrong\u003ePlanner\u003c/strong\u003e, and \u003cstrong\u003ePower Automate\u003c/strong\u003e – including \u003cstrong\u003eTeams notifications\u003c/strong\u003e when a ticket is created and a \u003cstrong\u003ecompletion message\u003c/strong\u003e when it’s closed.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eGo to \u003ca href=\"https://jonaskufner.com/en/posts/ticketsystem-microsoft-365-sharepoint-referenzliste-statusbenachrichtigungen/\"\u003ePart 2\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"target-picture--prerequisites\"\u003eTarget Picture \u0026amp; Prerequisites\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e A simple ticket system that automatically converts submissions from \u003cstrong\u003eForms\u003c/strong\u003e into \u003cstrong\u003ePlanner\u003c/strong\u003e tasks, sorts them into buckets, and notifies the requester in \u003cstrong\u003eTeams\u003c/strong\u003e. Upon \u003cstrong\u003ecompletion\u003c/strong\u003e, a feedback message is automatically sent.\u003c/p\u003e","title":"Simple Ticket System with Microsoft Forms, Planner \u0026 Power Automate – Step-by-Step to a Quick Ticket Solution in Microsoft 365"},{"content":" Video for this blog post: 👉 Watch the YouTube tutorial\nOverview In this post, I’ll show you how to create a custom connector for the OpenWeatherMap API and then use it in Power Automate and Power Apps (Canvas).\nWe’ll go step by step: Test the API (Postman) → Create the connector → Define the action → Test the connection → Use it in flows and apps.\nWhy a Custom Connector? The Microsoft Power Platform includes many out-of-the-box connectors. But if your system or your API isn’t among them, you need a flexible solution.\nWith a custom connector, you can integrate any REST API — such as project management, accounting, or AI services. For this tutorial, we’ll use OpenWeatherMap as a simple, practical example.\nPrerequisites Access to Microsoft Power Platform (Power Apps / Power Automate) A free OpenWeatherMap account including an API key Postman for quick API testing (free) Step 1: Test the API Call with Postman Before actually creating the custom connector, it makes sense to test the API call with Postman. This is optional but helps for the next steps.\nCreate a new request (GET). Use the URL from the OWM documentation, e.g.:\nhttps://api.openweathermap.org/data/2.5/weather?lat=48.17\u0026lon=11.61\u0026units=metric\u0026appid=YOUR_API_KEY Click Send — if successful, you’ll receive status code 200 and a JSON response with weather data. Postman: Successful GET call with status 200 and JSON response.\nTypical response fields (shortened):\n{ \u0026#34;weather\u0026#34;:[{\u0026#34;main\u0026#34;:\u0026#34;Clear\u0026#34;,\u0026#34;description\u0026#34;:\u0026#34;clear sky\u0026#34;}], \u0026#34;main\u0026#34;:{\u0026#34;temp\u0026#34;:21.3,\u0026#34;feels_like\u0026#34;:21.0,\u0026#34;humidity\u0026#34;:45}, \u0026#34;wind\u0026#34;:{\u0026#34;speed\u0026#34;:3.6}, \u0026#34;name\u0026#34;:\u0026#34;Munich\u0026#34;, \u0026#34;coord\u0026#34;:{\u0026#34;lat\u0026#34;:48.17,\u0026#34;lon\u0026#34;:11.61} } Step 2: Create the Custom Connector in Power Apps Go to make.powerapps.com → Custom Connectors.\n2.1 General Name: e.g. OpenWeather Connector Host: api.openweathermap.org Base URL: /data/2.5/ Description (example):\n“The custom connector provides the ‘Current Weather’ action, which returns weather information for a defined location. The data source is openweathermap.org.” Optional: Add an icon \u0026amp; color for better recognition.\nPower Apps: General section with host api.openweathermap.org and base URL /data/2.5/.\n2.2 Security Authentication type: “API Key” Parameter label: any (e.g. “OpenWeather API Key”) Parameter name: appid (must match the API) Parameter location: Query (as in the Postman test) Power Apps: Security section – authentication type API Key, parameter name appid, location Query.\n2.3 Definition (Actions) Add a new action Summary: Current Weather Description: Returns current weather for a given position (lat/lon). Operation ID: CurrentWeatherForLocation (unique, no spaces) Request:\nImport the example request (e.g., from Postman or as a sample URL).\nRemove appid from the parameters because the value is provided via the connection.\nKeep lat and lon as query parameters.\nPower Apps: Definition section – action Current Weather with query parameters lat \u0026amp; lon.\n2.4 Code (optional) Here, you could transform API responses (e.g., forward only selected fields). For the first setup, we’ll skip this part.\n2.5 Test Save the connector → then, under the “Test” tab, create a new connection.\nEnter your API key (appid).\nEnter lat/lon, e.g. 48.17 and 11.61 (English Garden, Munich).\nRun the test – you should see the JSON response.\nPower Apps: Test section – connection with API key and test call using lat=48.17, lon=11.61.\nStep 3: Use in Power Automate Create a new flow (e.g., “Manually triggered”).\nAction → Custom → select your OpenWeather Connector.\nPass parameters: lat \u0026amp; lon.\nSave and test the flow.\nThe output contains all weather data, which you can further process (e.g., condition, message, Teams post, email).\nPower Automate: Flow action from the custom connector showing weather data output.\nExample: Use fields from the response\nbody(\u0026#39;CurrentWeatherForLocation\u0026#39;)?[\u0026#39;main\u0026#39;]?[\u0026#39;temp\u0026#39;] body(\u0026#39;CurrentWeatherForLocation\u0026#39;)?[\u0026#39;weather\u0026#39;]?[0]?[\u0026#39;description\u0026#39;] Step 4: Use in Power Apps (Canvas) Add a data source → select your OpenWeather Connector.\nIn Power FX, call the action and pass parameters as a record.\nExample (OnSelect of a button):\nSet( gblWeather, OpenWeatherConnector.CurrentWeatherForLocation( { lat: 48.17, lon: 11.61 } ) ) Example (Text label):\n\u0026#34;Temp: \u0026#34; \u0026amp; Round(gblWeather.main.temp, 1) \u0026amp; \u0026#34; °C — \u0026#34; \u0026amp; First(gblWeather.weather).description Power Apps (Canvas): Label showing temperature \u0026amp; description from gblWeather.\nTip: Define units=metric in the action or as an optional query parameter to return temperatures in °C.\nSummary What? Custom connector for OpenWeatherMap Why? Use any REST API in the Power Platform How? Test in Postman → define connector → use in Flows \u0026amp; Apps Code? Power FX for calling \u0026amp; displaying results Next step: Package as a solution \u0026amp; connect more business APIs Video: Step-by-step walkthrough\n👉 Watch the tutorial here:\nCustom Connector – OpenWeatherMap (YouTube)\nYouTube: Connect any API with the Power Platform 🚀 | Custom Connector TutorialVideo tutorial for the blog post (YouTube | external link)\nI plan to build my own interfaces between business applications next (e.g., project management, accounting, AI services).\nWhich applications would you like to connect? Let me know in the comments!\n","permalink":"https://jonaskufner.com/en/posts/custom-connector-openweathermap-power-platform/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eVideo for this blog post:\u003c/strong\u003e 👉 \u003ca href=\"https://www.youtube.com/watch?v=SPGXvE3D4cs\"\u003eWatch the YouTube tutorial\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eIn this post, I’ll show you how to create a \u003cstrong\u003ecustom connector\u003c/strong\u003e for the \u003cstrong\u003eOpenWeatherMap API\u003c/strong\u003e and then use it in \u003cstrong\u003ePower Automate\u003c/strong\u003e and \u003cstrong\u003ePower Apps (Canvas)\u003c/strong\u003e.\u003cbr\u003e\nWe’ll go step by step: \u003cstrong\u003eTest the API (Postman)\u003c/strong\u003e → \u003cstrong\u003eCreate the connector\u003c/strong\u003e → \u003cstrong\u003eDefine the action\u003c/strong\u003e → \u003cstrong\u003eTest the connection\u003c/strong\u003e → \u003cstrong\u003eUse it in flows and apps\u003c/strong\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"why-a-custom-connector\"\u003eWhy a Custom Connector?\u003c/h2\u003e\n\u003cp\u003eThe Microsoft Power Platform includes many \u003cstrong\u003eout-of-the-box connectors\u003c/strong\u003e. But if \u003cem\u003eyour\u003c/em\u003e system or \u003cem\u003eyour\u003c/em\u003e API isn’t among them, you need a flexible solution.\u003cbr\u003e\nWith a \u003cstrong\u003ecustom connector\u003c/strong\u003e, you can integrate \u003cstrong\u003eany REST API\u003c/strong\u003e — such as project management, accounting, or AI services. For this tutorial, we’ll use \u003cstrong\u003eOpenWeatherMap\u003c/strong\u003e as a simple, practical example.\u003c/p\u003e","title":"Custom Connector for OpenWeatherMap in the Power Platform (Power Apps \u0026 Power Automate)"}]